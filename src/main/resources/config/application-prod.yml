# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use
# For example: application-dev.yml if you use the "dev" profile.
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# https://docs.spring.io/spring-boot/reference/features/profiles.html
# ===================================================================

logging:
  level:
    root: info
    org.hibernate.sql: info
    com.ars.authservice: info
    org.springframework.security: info
  charset:
    console: UTF-8
    file: UTF-8
  # Custom properties to define logs file paths according to different profiles
  file-path: /mnt/logs

server:
  port: 8000

spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${ARS_AUTH_DB_HOST}?serverTimezone=UTC
    username: ${ARS_AUTH_DB_USERNAME}
    password: ${ARS_AUTH_DB_PASSWORD}
    hikari:
      poolName: Hikari
      # AllowPoolSuspension means pause connection when there is a problem
      # When the setting is false, the system will not allow to pause connections in pool
      # Helping to maintain continuous system operation even when there is a problem
      allow-pool-suspension: false
      auto-commit: false # Do not automatically commit transactions
      maximumPoolSize: 30 # Maximum database connections
      minimumIdle: 3 # At least connections will be kept idle, ready for use
      maxLifetime: 1200000 # Maximum time (20 minutes) that a connection can exist in the pool before being closed and recreated
      idleTimeout: 180000 # Maximum time (3 minutes) that a connection can be idle before being closed
      connectionTimeout: 200000 # Maximum time (3 minutes 20s) to wait for connection from pool when no connection is available
      leak-detection-threshold: 200000 # If a connection is not returned to the pool after 3 minutes 20s, it will be detected as a "leak"
      data-source-properties:
        cachePrepStmts: true # Enable caching to improve performance when using multiple identical statements
        prepStmtCacheSize: 100 # Prepared statement cache size. In this case, the cache can hold up to 100 statements
        prepStmtCacheSqlLimit: 1024 # Limits the maximum length (in bytes) of an SQL statement that can be cached
        useServerPrepStmts: true # Enable server-side prepared statements instead of client-side prepared statements
  sql:
    init:
      mode: never
  jpa:
    # Avoid causing LazyInitializationException if querying outside the scope of EntityManager or causing poor performance
    open-in-view: false
    hibernate:
      # Hibernate only checks if the current schema matches the entity
      # If it does not match, the application will not start
      # Do not make any changes to the schema
      ddl-auto: validate
    properties:
      hibernate:
        show_sql: true
        format_sql: false
        jdbc:
          time_zone: UTC
          ddl-auto: validate
  jackson:
    time-zone: UTC

# Eureka client configuration
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    healthcheck:
      enabled: true
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    hostname: localhost
    instanceId: ${spring.application.name}:${server.port}

dct:
  base:
    security:
      jwt:
        enabled: true
        base64-secret-key: ${ARS_GATEWAY_SECURITY_KEY}
        access-token:
          validity: 300000 # 5 minutes
        refresh-token:
          validity: 3600000 # 1 hour
          validity-for-remember: 604800000 # 7 days
    i18n:
      base-names:
        - classpath:i18n/messages
      encoding: UTF-8
