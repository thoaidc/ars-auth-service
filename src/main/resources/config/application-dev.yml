# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use
# For example: application-dev.yml if you use the "dev" profile.
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# https://docs.spring.io/spring-boot/reference/features/profiles.html
# ===================================================================

logging:
  level:
    root: debug
    com.ars.authservice: debug
    org.springframework.security: debug
  charset:
    console: UTF-8
    file: UTF-8
  # Custom properties to define logs file paths according to different profiles
  file-path: mnt/logs

server:
  port: 8000

spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ars_auth_db?serverTimezone=UTC
    username: admin
    password: 123456
    hikari:
      poolName: Hikari
      # AllowPoolSuspension means pause connection when there is a problem
      # When the setting is false, the system will not allow to pause connections in pool
      # Helping to maintain continuous system operation even when there is a problem
      allow-pool-suspension: false
      auto-commit: false # Do not automatically commit transactions
      maximumPoolSize: 30 # Maximum database connections
      minimumIdle: 3 # At least connections will be kept idle, ready for use
      maxLifetime: 1200000 # Maximum time (20 minutes) that a connection can exist in the pool before being closed and recreated
      idleTimeout: 180000 # Maximum time (3 minutes) that a connection can be idle before being closed
      connectionTimeout: 200000 # Maximum time (3 minutes 20s) to wait for connection from pool when no connection is available
      leak-detection-threshold: 200000 # If a connection is not returned to the pool after 3 minutes 20s, it will be detected as a "leak"
      data-source-properties:
        cachePrepStmts: true # Enable caching to improve performance when using multiple identical statements
        prepStmtCacheSize: 100 # Prepared statement cache size. In this case, the cache can hold up to 100 statements
        prepStmtCacheSqlLimit: 1024 # Limits the maximum length (in bytes) of an SQL statement that can be cached
        useServerPrepStmts: true # Enable server-side prepared statements instead of client-side prepared statements
  sql:
    init:
      mode: never
  jpa:
    # Avoid causing LazyInitializationException if querying outside the scope of EntityManager or causing poor performance
    open-in-view: false
    hibernate:
      # Hibernate only checks if the current schema matches the entity
      # If it does not match, the application will not start
      # Do not make any changes to the schema
      ddl-auto: validate
    properties:
      hibernate:
        show_sql: true
        format_sql: false
        jdbc:
          time_zone: UTC
          ddl-auto: validate
  jackson:
    time-zone: UTC

# Eureka client configuration
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    healthcheck:
      enabled: true
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    hostname: localhost
    instanceId: ${spring.application.name}:${server.port}

dct:
  base:
    domain: http://localhost:${server.port}

    features:
      datasource: enabled
      jpa-auditing: enabled
      rest-template: disabled
      resources: disabled
      socket: disabled
      i18n: enabled

    i18n:
      base-names:
        - classpath:i18n/messages
      encoding: UTF-8

    socket:
      endpoints:
        - /ws
      broker-prefixes:
        - /topics
      application-prefixes:
        - /api/ws

    resources:
      static-resource:
        patterns:
          - /**.html
          - /**.js
          - /**.css
          - /**.ico
          - /uploads/**
          - /file/**
          - /i18n/**
        locations:
          - classpath:/static/
          - classpath:/static/i18n/
      upload-resource:
        accept-formats:
          - .png
          - .jpg
          - .jpeg
          - .gif
          - .svg
          - .webp
          - .webm
        patterns:
          - /uploads/
        locations:
          - D:\\Downloads

    interceptor:
      excluded-patterns:
        - /**.html
        - /**.js
        - /**.css
        - /**.ico
        - /uploads/**
        - /file/**
        - /login/**
        - /error**
        - /i18n/**
      cors:
        apply-for:
          - /**
        allowed-origin-patterns:
          - "*"
        allowed-headers:
          - Content-Type
          - Authorization
          - Accept
          - Origin
          - X-CSRF-Token
          - X-Requested-With
          - Access-Control-Allow-Origin
          - X-App-Version
          - X-Device-ID
        allowed-methods:
          - GET
          - PUT
          - POST
          - PATCH
          - DELETE
          - OPTIONS
        allowed-credentials: true

    security:
      enabled-tls: false
      password-encrypt-factor: 12
      public-request-patterns:
        - /
        - /**.ico
        - /p/**
        - /api/p/**
        - /api/v1/p/**
        - /login/**

      jwt:
        enabled: true
        base64-secret-key: ZGN0LWJhc2Utc2VjcmV0LWtleS10b2tlbi12YWxpZGl0eS04NjQwMDAwMG1zLWZvci1yZW1lbWJlci1tZS04NjQwMDAwMG1z
        access-token:
          validity: 300000 # 5 minutes
        refresh-token:
          validity: 1800000 # 30 minutes
          validity-for-remember: 3600000 # 60 minutes

      oauth2:
        enabled: true
        base-authorize-uri: /api/p/v1/oauth2/authorize # Add /{registrationId} (eg: /google) when calling from clients
        clients:
          - provider: google
            client-name: Demo Starter Google
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - https://www.googleapis.com/auth/userinfo.email
              - https://www.googleapis.com/auth/userinfo.profile
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            redirect-uri: ${dct.base.domain}/login/oauth2/code/google
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
            username-attribute-name: sub
